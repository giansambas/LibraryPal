import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;

public class M2_Summative extends JFrame {
    private Connection conn;
    private JTable fineTable;
    private DefaultTableModel tableModel;
    private JTextField nameField, amountField, reasonField;

    public M2_Summative() {
        setTitle("LibraryPal");
        setSize(700, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        connectDatabase();

        if (conn == null) {
            JOptionPane.showMessageDialog(this,
                "Fatal error: Could not connect to database.\n\n" +
                "Check that:\n" +
                "1. The SQLite JDBC driver is in your classpath.\n" +
                "2. You have permission to write to the directory.\n" +
                "3. The path to the database is correct.");
            System.exit(1);
        }

        initUI();
        loadFines();
    }

   private void connectDatabase() {
    try {
        Class.forName("org.sqlite.JDBC");
        String dbPath = "C:/Users/Gian Sambas/Desktop/java/LibraryPal/librarypal.db";
        System.out.println("Attempting to connect to DB at: " + dbPath);
        conn = DriverManager.getConnection("jdbc:sqlite:" + dbPath);

        Statement stmt = conn.createStatement();
        stmt.execute("CREATE TABLE IF NOT EXISTS fines (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, amount REAL, reason TEXT, date TEXT)");

    } catch (ClassNotFoundException e) {
        JOptionPane.showMessageDialog(this, "SQLite JDBC driver not found: " + e.getMessage());
        e.printStackTrace();
        conn = null;
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database connection failed: " + e.getMessage());
        e.printStackTrace();
        conn = null;
    }
}


   private void initUI() {
    JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
    mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

    tableModel = new DefaultTableModel(new String[]{"ID", "Name", "Amount", "Reason", "Date"}, 0);
    fineTable = new JTable(tableModel);
    fineTable.setFillsViewportHeight(true);
    fineTable.setRowHeight(24);
    fineTable.setFont(new Font("Segoe UI", Font.PLAIN, 14));
    fineTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
    JScrollPane scrollPane = new JScrollPane(fineTable);
    scrollPane.setPreferredSize(new Dimension(600, 250));

    mainPanel.add(scrollPane, BorderLayout.CENTER);

    JPanel formPanel = new JPanel(new GridBagLayout());
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.HORIZONTAL;

    JLabel nameLabel = new JLabel("Name:");
    JLabel amountLabel = new JLabel("Amount:");
    JLabel reasonLabel = new JLabel("Reason:");

    nameField = new JTextField(15);
    amountField = new JTextField(10);
    reasonField = new JTextField(15);

    JButton addButton = new JButton("➕ Add Fine");
    JButton viewButton = new JButton("🔍 View Fine");
    JButton deleteButton = new JButton("🗑 Delete Fine");

    Font labelFont = new Font("Segoe UI", Font.PLAIN, 14);
    nameLabel.setFont(labelFont);
    amountLabel.setFont(labelFont);
    reasonLabel.setFont(labelFont);

 
    gbc.gridx = 0; gbc.gridy = 0; formPanel.add(nameLabel, gbc);
    gbc.gridx = 1; gbc.gridy = 0; formPanel.add(nameField, gbc);

    gbc.gridx = 0; gbc.gridy = 1; formPanel.add(amountLabel, gbc);
    gbc.gridx = 1; gbc.gridy = 1; formPanel.add(amountField, gbc);

    gbc.gridx = 0; gbc.gridy = 2; formPanel.add(reasonLabel, gbc);
    gbc.gridx = 1; gbc.gridy = 2; formPanel.add(reasonField, gbc);

    gbc.gridx = 0; gbc.gridy = 3; formPanel.add(addButton, gbc);
    gbc.gridx = 1; gbc.gridy = 3; formPanel.add(viewButton, gbc);
    gbc.gridx = 2; gbc.gridy = 3; formPanel.add(deleteButton, gbc);

    mainPanel.add(formPanel, BorderLayout.SOUTH);

    add(mainPanel);

    addButton.addActionListener(e -> addFine());
    viewButton.addActionListener(e -> viewFine());
    deleteButton.addActionListener(e -> deleteFine());
}



    private void loadFines() {
        if (conn == null) {
            JOptionPane.showMessageDialog(this, "Cannot load fines: No database connection.");
            return;
        }

        try {
            tableModel.setRowCount(0);
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM fines");

            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getDouble("amount"),
                        rs.getString("reason"),
                        rs.getString("date")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to load fines: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void addFine() {
        String name = nameField.getText().trim();
        String amountText = amountField.getText().trim();
        String reason = reasonField.getText().trim();
        String date = java.time.LocalDate.now().toString();

        if (name.isEmpty() || amountText.isEmpty() || reason.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }

        try {
            double amount = Double.parseDouble(amountText);
            PreparedStatement pstmt = conn.prepareStatement(
                "INSERT INTO fines (name, amount, reason, date) VALUES (?, ?, ?, ?)");
            pstmt.setString(1, name);
            pstmt.setDouble(2, amount);
            pstmt.setString(3, reason);
            pstmt.setString(4, date);
            pstmt.executeUpdate();

            nameField.setText("");
            amountField.setText("");
            reasonField.setText("");
            loadFines();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Amount must be a number.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error adding fine: " + e.getMessage());
            e.printStackTrace();
        }
    }
private void viewFine() {
    int row = fineTable.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Please select a fine to view.");
        return;
    }

    int id = (int) tableModel.getValueAt(row, 0);
    String name = (String) tableModel.getValueAt(row, 1);
    double amount = (double) tableModel.getValueAt(row, 2);
    String reason = (String) tableModel.getValueAt(row, 3);
    String date = (String) tableModel.getValueAt(row, 4);

    String message = String.format(
        "Fine ID: %d\nName: %s\nAmount: %.2f\nReason: %s\nDate: %s",
        id, name, amount, reason, date
    );

    JOptionPane.showMessageDialog(this, message, "Fine Details", JOptionPane.INFORMATION_MESSAGE);
}

    private void deleteFine() {
    int row = fineTable.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Please select a fine to delete.");
        return;
    }

    int id = (int) tableModel.getValueAt(row, 0);
    String name = (String) tableModel.getValueAt(row, 1);

    int confirm = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to delete the fine for \"" + name + "\"?",
        "Confirm Deletion",
        JOptionPane.YES_NO_OPTION
    );

    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    try {
        PreparedStatement pstmt = conn.prepareStatement("DELETE FROM fines WHERE id = ?");
        pstmt.setInt(1, id);
        pstmt.executeUpdate();
        loadFines();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error deleting fine: " + e.getMessage());
        e.printStackTrace();
    }
}


    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new M2_Summative().setVisible(true));
    }
}
